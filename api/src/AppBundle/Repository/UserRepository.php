<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
  public function findFiltered($filters) {
    $em = $this->getEntityManager();

    $qb = $em->createQueryBuilder();
    $qb->select('u')->from('AppBundle\Entity\User', 'u')
            ->where("u.deletedAt is null");



    if(isset($filters['firstName']) && trim($filters['firstName']) !== '') {
      $qb->andWhere($qb->expr()->like('LOWER(u.firstName)', ":firstName"));
      $qb->setParameter('firstName', "%".strtolower($filters['firstName'])."%");
    }

    if(isset($filters['lastName']) && trim($filters['lastName']) !== '') {
      $qb->andWhere($qb->expr()->like('LOWER(u.lastName)', ":lastName"));
      $qb->setParameter('lastName', "%".strtolower($filters['lastName'])."%");
    }


    if(isset($filters['supervisor']) && trim($filters['supervisor']) !== '') {
      $qb->andWhere('u.supervisor = :supervisor');
      $qb->setParameter('supervisor', $filters['supervisor']);
    }

    if(isset($filters['duties']) && trim($filters['duties']) !== '') {
      $dutyIds = explode(",", $filters['duties']);

      $qb->innerJoin('u.duties', 'd');
      $qb->andWhere('d.id IN (:dutyIds)');
      $qb->having('COUNT(distinct d.id) = :dutySize');
      $qb->groupBy('u.id');

      $qb->setParameter('dutySize', count($dutyIds));
      $qb->setParameter('dutyIds', $dutyIds);

    }



    $query =   $qb->getQuery();
    //echo $query->getSql();
    /*
    $query = $em->createQuery("
      SELECT u
      FROM AppBundle:User u
      WHERE u.deletedAt is null
    ");
    */
    return $query->getResult();
  }

  public function findOne($id) {
    $em = $this->getEntityManager();
    $query = $em->createQuery("
      SELECT u
      FROM AppBundle:User u
      WHERE u.id = ?1
    ");

    $query->setParameter(1, $id);

    return $query->getSingleResult();
  }

  public function pruneSince($date) {
    $em = $this->getEntityManager();

    $qb = $em->createQueryBuilder();
    $qb->delete('AppBundle:User', 'u');
    $qb->where('u.lastLogin <= :date');
    $qb->setParameter("date", $date);


    return $qb->getQuery()->getSingleScalarResult();
  }
}
